// file: FaceRecognitionOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: FaceRecognitionOntology.java
 * @author ontology bean generator
 * @version 2019/08/13, 00:52:23
 */
public class FaceRecognitionOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "FaceRecognition";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new FaceRecognitionOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String USUARIOLOGUEADO_USUARIO="usuario";
    public static final String USUARIOLOGUEADO="UsuarioLogueado";
    public static final String CANCELARASIGNACION_IDASIGNACION="idAsignacion";
    public static final String CANCELARASIGNACION_CEDULA="cedula";
    public static final String CANCELARASIGNACION="CancelarAsignacion";
    public static final String SALONASIGNADO_ASIGNACION="asignacion";
    public static final String SALONASIGNADO="SalonAsignado";
    public static final String ENVIARRECONOCIMIENTO_RECONOCIMIENTO="reconocimiento";
    public static final String ENVIARRECONOCIMIENTO="EnviarReconocimiento";
    public static final String ASIGNARSALON_IDASIGNACION="idAsignacion";
    public static final String ASIGNARSALON_CEDULA="cedula";
    public static final String ASIGNARSALON="AsignarSalon";
    public static final String ENVIARRECOMENDACION_RECOMENDACION="recomendacion";
    public static final String ENVIARRECOMENDACION="EnviarRecomendacion";
    public static final String SOLICITARENTRADA_SALON="salon";
    public static final String SOLICITARENTRADA_USUARIO="usuario";
    public static final String SOLICITARENTRADA="SolicitarEntrada";
    public static final String ASIGNACIONCANCELADA_ASIGNACION="asignacion";
    public static final String ASIGNACIONCANCELADA="AsignacionCancelada";
    public static final String ASIGNACION_SALON="salon";
    public static final String ASIGNACION_DIA="dia";
    public static final String ASIGNACION_HORA="hora";
    public static final String ASIGNACION_ID="id";
    public static final String ASIGNACION_USUARIO="usuario";
    public static final String ASIGNACION="Asignacion";
    public static final String RECONOCIMIENTO_USUARIO="usuario";
    public static final String RECONOCIMIENTO="Reconocimiento";
    public static final String SALON_ID="id";
    public static final String SALON_FACULTAD="facultad";
    public static final String SALON_BLOQUE="bloque";
    public static final String SALON_NUMERO="numero";
    public static final String SALON="Salon";
    public static final String USUARIO_ROL="rol";
    public static final String USUARIO_HORARIO="horario";
    public static final String USUARIO_FACULTAD="facultad";
    public static final String USUARIO_NOMBRE="nombre";
    public static final String USUARIO_CEDULA="cedula";
    public static final String USUARIO="Usuario";
    public static final String FACULTAD_NOMBRE="nombre";
    public static final String FACULTAD="Facultad";
    public static final String HORARIO_ASIGNACIONES="asignaciones";
    public static final String HORARIO="Horario";
    public static final String RECOMENDACION_ASIGNACIONES="asignaciones";
    public static final String RECOMENDACION="Recomendacion";

  /**
   * Constructor
  */
  private FaceRecognitionOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema recomendacionSchema = new ConceptSchema(RECOMENDACION);
    add(recomendacionSchema, ontology.Recomendacion.class);
    ConceptSchema horarioSchema = new ConceptSchema(HORARIO);
    add(horarioSchema, ontology.Horario.class);
    ConceptSchema facultadSchema = new ConceptSchema(FACULTAD);
    add(facultadSchema, ontology.Facultad.class);
    ConceptSchema usuarioSchema = new ConceptSchema(USUARIO);
    add(usuarioSchema, ontology.Usuario.class);
    ConceptSchema salonSchema = new ConceptSchema(SALON);
    add(salonSchema, ontology.Salon.class);
    ConceptSchema reconocimientoSchema = new ConceptSchema(RECONOCIMIENTO);
    add(reconocimientoSchema, ontology.Reconocimiento.class);
    ConceptSchema asignacionSchema = new ConceptSchema(ASIGNACION);
    add(asignacionSchema, ontology.Asignacion.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema asignacionCanceladaSchema = new PredicateSchema(ASIGNACIONCANCELADA);
    add(asignacionCanceladaSchema, ontology.AsignacionCancelada.class);
    PredicateSchema solicitarEntradaSchema = new PredicateSchema(SOLICITARENTRADA);
    add(solicitarEntradaSchema, ontology.SolicitarEntrada.class);
    PredicateSchema enviarRecomendacionSchema = new PredicateSchema(ENVIARRECOMENDACION);
    add(enviarRecomendacionSchema, ontology.EnviarRecomendacion.class);
    PredicateSchema asignarSalonSchema = new PredicateSchema(ASIGNARSALON);
    add(asignarSalonSchema, ontology.AsignarSalon.class);
    PredicateSchema enviarReconocimientoSchema = new PredicateSchema(ENVIARRECONOCIMIENTO);
    add(enviarReconocimientoSchema, ontology.EnviarReconocimiento.class);
    PredicateSchema salonAsignadoSchema = new PredicateSchema(SALONASIGNADO);
    add(salonAsignadoSchema, ontology.SalonAsignado.class);
    PredicateSchema cancelarAsignacionSchema = new PredicateSchema(CANCELARASIGNACION);
    add(cancelarAsignacionSchema, ontology.CancelarAsignacion.class);
    PredicateSchema usuarioLogueadoSchema = new PredicateSchema(USUARIOLOGUEADO);
    add(usuarioLogueadoSchema, ontology.UsuarioLogueado.class);


    // adding fields
    recomendacionSchema.add(RECOMENDACION_ASIGNACIONES, asignacionSchema, 0, ObjectSchema.UNLIMITED);
    horarioSchema.add(HORARIO_ASIGNACIONES, asignacionSchema, 0, ObjectSchema.UNLIMITED);
    facultadSchema.add(FACULTAD_NOMBRE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    usuarioSchema.add(USUARIO_CEDULA, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    usuarioSchema.add(USUARIO_NOMBRE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    usuarioSchema.add(USUARIO_FACULTAD, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    usuarioSchema.add(USUARIO_HORARIO, horarioSchema, ObjectSchema.OPTIONAL);
    usuarioSchema.add(USUARIO_ROL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    salonSchema.add(SALON_NUMERO, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    salonSchema.add(SALON_BLOQUE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    salonSchema.add(SALON_FACULTAD, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    salonSchema.add(SALON_ID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    reconocimientoSchema.add(RECONOCIMIENTO_USUARIO, usuarioSchema, ObjectSchema.OPTIONAL);
    asignacionSchema.add(ASIGNACION_USUARIO, usuarioSchema, ObjectSchema.OPTIONAL);
    asignacionSchema.add(ASIGNACION_ID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    asignacionSchema.add(ASIGNACION_HORA, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    asignacionSchema.add(ASIGNACION_DIA, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    asignacionSchema.add(ASIGNACION_SALON, salonSchema, ObjectSchema.OPTIONAL);
    asignacionCanceladaSchema.add(ASIGNACIONCANCELADA_ASIGNACION, asignacionSchema, ObjectSchema.OPTIONAL);
    solicitarEntradaSchema.add(SOLICITARENTRADA_USUARIO, usuarioSchema, ObjectSchema.OPTIONAL);
    solicitarEntradaSchema.add(SOLICITARENTRADA_SALON, salonSchema, ObjectSchema.OPTIONAL);
    enviarRecomendacionSchema.add(ENVIARRECOMENDACION_RECOMENDACION, recomendacionSchema, ObjectSchema.OPTIONAL);
    asignarSalonSchema.add(ASIGNARSALON_CEDULA, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    asignarSalonSchema.add(ASIGNARSALON_IDASIGNACION, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    enviarReconocimientoSchema.add(ENVIARRECONOCIMIENTO_RECONOCIMIENTO, reconocimientoSchema, ObjectSchema.OPTIONAL);
    salonAsignadoSchema.add(SALONASIGNADO_ASIGNACION, asignacionSchema, ObjectSchema.OPTIONAL);
    cancelarAsignacionSchema.add(CANCELARASIGNACION_CEDULA, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    cancelarAsignacionSchema.add(CANCELARASIGNACION_IDASIGNACION, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    usuarioLogueadoSchema.add(USUARIOLOGUEADO_USUARIO, usuarioSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
